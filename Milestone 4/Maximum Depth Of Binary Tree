/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
      
        
        // Online - Recursive
        // return (root) ? (1 + std::max(maxDepth(root->left), maxDepth(root->right))) : 0;
        
        if (!root)
            return 0;
        
        std::queue<TreeNode *> nodes;
        nodes.push(root);
        
        int depth = 0;
        
        while(!nodes.empty()) {
            
            const int nodes_at_current_level = nodes.size();
            for(int i = 0; i < nodes_at_current_level; i++) {

                TreeNode *node = nodes.front();            
                nodes.pop();

                if (node->left)
                    nodes.push(node->left);

                if (node->right)
                    nodes.push(node->right);
            }

            depth++;
        }
        
        return depth;
    }
};
